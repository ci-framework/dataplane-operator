{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"dataplane-operator","text":"<p>The dataplane-operator automates the deployment of an OpenStack dataplane.</p> <p>NOTE</p> <p>The OpenStackDataPlane CRD/controller may eventually be moved to openstack-operator. The move is so that openstack-operator, as the umbrella operator, remains the single managing operator and UX for a complete OpenStack deployment (control plane and data plane).</p>"},{"location":"#dataplane-roles-and-nodes","title":"DataPlane, Roles, and Nodes","text":"<p>The dataplane-operator exposes the concepts of data plane role and nodes. These are represented as CRD's within the operator:</p> <ul> <li>OpenStackDataPlane</li> <li>OpenStackDataPlaneRole</li> <li>OpenStackDataPlaneNode</li> </ul> <p>The OpenStackDataPlane CRD provides for a logical grouping of roles, that altogether make up an OpenStack dataplane.</p> <p>Roles are grouped into the dataplane with the <code>DataPlane</code> field set on the role. Roles are also labeled with the dataplane they belong to:</p> <p><code>openstackdataplane=&lt;dataplane-name&gt;</code></p> <p>The dataplane does not maintain a list of roles. The source of dataplane and role grouping is stored in the <code>DataPlane</code> field of the role.</p> <p>The OpenStackDataPlaneRole CRD provides for a logical grouping of nodes of a similar type within a role. Similarities within a role are defined by the user, and could be of a small scope (ansible port), or a large scope (same network config, nova config, provisioning config, etc). The properties that all nodes in a role share is set in the NodeTemplate field of the role's Spec.</p> <p>A role also provides for an inheritance model of node attributes. Properties from the <code>NodeTemplate</code> on the role will automatically be inherited by the nodes on that role. Nodes can also set their own properties within their <code>Node</code> field, which will override the inherited values from the role.</p> <p>Similarly to the dataplane and role grouping, the grouping of nodes within a role is done with the <code>Role</code> field on the node.  Node's in a given role will have the <code>Role</code> field set to their role name.  Nodes do not have to be in a role, in which case their <code>Role</code> field will be empty. Roles do not maintain the list of nodes in that role. This ensures that the single source of node and role association is stored only in the <code>Role</code> field on the node. Nodes are also labeled with their role using <code>openstackdataplanerole=&lt;role-name&gt;</code> to allow for easy querying and filtering on nodes in a role.</p>"},{"location":"#deployment","title":"Deployment","text":"<p>The deployment handling in <code>dataplane-operator</code> is implemented within the deployment package at <code>pkg/deployment</code>. This allows for both a node and role to be deployed in the same way. A node uses an ansible inventory containing just that single node when it triggers a deployment. A role uses an ansible inventory containing all the nodes in that role when it triggers a deployment. This allows for deploying just a single node at a time, or an entire role for bulk deployment.</p>"},{"location":"#getting-started","title":"Getting Started","text":"<p>You\u2019ll need a Kubernetes cluster to run against. You can use KIND to get a local cluster for testing, or run against a remote cluster. Note: Your controller will automatically use the current context in your kubeconfig file (i.e. whatever cluster <code>kubectl cluster-info</code> shows).</p>"},{"location":"#running-on-the-cluster","title":"Running on the cluster","text":"<ol> <li>Install Instances of Custom Resources:</li> </ol> <pre><code>kubectl apply -f config/samples/\n</code></pre> <ol> <li>Build and push your image to the location specified by <code>IMG</code>:</li> </ol> <pre><code>make docker-build docker-push IMG=&lt;some-registry&gt;/dataplane-operator:tag\n</code></pre> <ol> <li>Deploy the controller to the cluster with the image specified by <code>IMG</code>:</li> </ol> <pre><code>make deploy IMG=&lt;some-registry&gt;/dataplane-operator:tag\n</code></pre>"},{"location":"#uninstall-crds","title":"Uninstall CRDs","text":"<p>To delete the CRDs from the cluster:</p> <pre><code>make uninstall\n</code></pre>"},{"location":"#undeploy-controller","title":"Undeploy controller","text":"<p>UnDeploy the controller to the cluster:</p> <pre><code>make undeploy\n</code></pre>"},{"location":"#contributing","title":"Contributing","text":"<p>// TODO(user): Add detailed information on how you would like others to contribute to this project</p>"},{"location":"#how-it-works","title":"How it works","text":"<p>This project aims to follow the Kubernetes Operator pattern</p> <p>It uses Controllers which provides a reconcile function responsible for synchronizing resources untile the desired state is reached on the cluster</p>"},{"location":"#test-it-out","title":"Test It Out","text":"<ol> <li>Install the CRDs into the cluster:</li> </ol> <pre><code>make install\n</code></pre> <ol> <li>Run your controller (this will run in the foreground, so switch to a new terminal if you want to leave it running):</li> </ol> <pre><code>make run\n</code></pre> <p>NOTE: You can also run this in one step by running: <code>make install run</code></p>"},{"location":"#modifying-the-api-definitions","title":"Modifying the API definitions","text":"<p>If you are editing the API definitions, generate the manifests such as CRs or CRDs using:</p> <pre><code>make manifests\n</code></pre> <p>NOTE: Run <code>make --help</code> for more information on all potential <code>make</code> targets</p> <p>More information can be found via the Kubebuilder Documentation</p>"},{"location":"#license","title":"License","text":"<p>Copyright 2023.</p> <p>Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at</p> <pre><code>http://www.apache.org/licenses/LICENSE-2.0\n</code></pre> <p>Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.</p>"},{"location":"architecture/","title":"Architecture","text":"<p>Here is a diagram with the EDPM components:</p> <p></p>"},{"location":"contributing/","title":"Contributing","text":""},{"location":"contributing/#testing","title":"Testing","text":"<p>The tests can be run with the following command: <pre><code>make test\n</code></pre></p>"},{"location":"contributing/#contributing-to-documentation","title":"Contributing to documentation","text":""},{"location":"contributing/#rendering-documentation-locally","title":"Rendering documentation locally","text":"<p>Install docs build requirements into virtualenv:</p> <pre><code>python3 -m venv local/docs-venv\nsource local/docs-venv/bin/activate\npip install -r docs/doc_requirements.txt\n</code></pre> <p>Serve docs site on localhost:</p> <pre><code>mkdocs serve\n</code></pre> <p>Click the link it outputs. As you save changes to files modified in your editor, the browser will automatically show the new content.</p>"},{"location":"contributing/#create-or-edit-diagrams","title":"Create or edit diagrams","text":"<p>Create a <code>puml</code> file inside <code>docs/diagrams/src</code></p> <pre><code>touch docs/diagrams/src/demo.puml\n</code></pre> <p>Check the PlantUML syntax here: https://plantuml.com/deployment-diagram</p> <p>Serve docs site on localhost:</p> <pre><code>mkdocs serve\n</code></pre> <p>Add the yielded <code>svg</code> into the desired <code>.md</code> file <pre><code>![Diagram demo](diagrams/out/demo.svg \"Diagram demo\")\n</code></pre></p>"},{"location":"inheritance/","title":"Inheritance","text":"<p>An <code>OpenStackDataPlaneNode</code> inherits any attribute of an <code>OpenStackDataPlaneRole</code> but those attributes may also be overridden on the node level.</p> <p>Suppose the following CR is created with <code>oc create -f openstackdataplanerole-sample.yaml</code>:</p> <p><pre><code>---\napiVersion: dataplane.openstack.org/v1beta1\nkind: OpenStackDataPlaneRole\nmetadata:\nname: openstackdataplanerole-sample\nspec:\ndataPlaneNodes:\n- name: openstackdataplanenode-sample-1\nansibleHost: 192.168.122.18\nhostName: openstackdataplanenode-sample-1.localdomain\nnode:\nnetworks:\n- fixedIP: 192.168.122.18\nnetwork: ctlplane\n- name: openstackdataplanenode-sample-2\nansibleHost: 192.168.122.19\nhostName: openstackdataplanenode-sample-2.localdomain\nnode:\nnetworks:\n- fixedIP: 192.168.122.19\nnetwork: ctlplane\nnodeTemplate:\nansiblePort: 22\nansibleUser: root\nmanaged: false\nmanagementNetwork: ctlplane\nnetworkConfig:\ntemplate: templates/net_config_bridge.j2\n</code></pre> Then two CRs like the following, representing two nodes, will be created automatically by the dataplane-operator and there is no need to <code>oc create</code> separate files containing the following.</p> <p>Node 1 <pre><code>---\napiVersion: dataplane.openstack.org/v1beta1\nkind: OpenStackDataPlaneNode\nmetadata:\nname: openstackdataplanenode-sample-1\nspec:\nansibleHost: 192.168.122.18\nhostName: openstackdataplanenode-sample-1.localdomain\nnode:\nnetworks:\n- fixedIP: 192.168.122.18\nnetwork: ctlplane\nrole: openstackdataplanerole-sample\n</code></pre> Node 2 <pre><code>---\napiVersion: dataplane.openstack.org/v1beta1\nkind: OpenStackDataPlaneNode\nmetadata:\nname: openstackdataplanenode-sample-2\nspec:\nansibleHost: 192.168.122.19\nhostName: openstackdataplanenode-sample-2.localdomain\nnode:\nnetworks:\n- fixedIP: 192.168.122.19\nnetwork: ctlplane\nrole: openstackdataplanerole-sample\n</code></pre> Because of inheritance, redundant information did not need to be provided to both nodes. Only the information which differed per node, e.g. <code>ansibleHost</code>, had to be specified. Furthermore, the redundant information is not seen in the two nodes' CRs. I.e. we do not see the following from the <code>nodeTemplate</code> in node 1 and 2 above. <pre><code>    ansiblePort: 22\nansibleUser: root\nmanaged: false\nmanagementNetwork: ctlplane\nnetworkConfig:\ntemplate: templates/net_config_bridge.j2\n</code></pre> However, it's unambiguous that each node has <code>ansiblePort</code> 22 because they have <code>role: openstackdataplanerole-sample</code>. If the node is inspected however, port 22 will be set.</p> <p>The node controller resolves this dynamically by looking at <code>role.nodeSpec</code> and we can assume that the value was inherited. If we need to override a setting for any single node so that it doesn't use it's <code>nodeTemplate</code>, then we may do so by directly updating only that node (e.g. with <code>oc edit</code>). In that case we'd see an <code>ansiblePort</code> set directly in that node's CR. This allows the user to change the <code>nodeTemplate</code> after creation and once reconciliation is completed all existing nodes will inherit the new value.</p> <p>Almost any top level property in a node overrides the whole property in a role. E.g. if the role <code>nodeTemplate</code> had a list like the following: <pre><code>    foo:\n      - bar: baz\n</code></pre> and a node had a list like the following: <pre><code>    foo:\n      - qux: quux\n</code></pre> Then the node will only have <code>{\"qux\": \"quux\"}</code> in its list. I.e. there would not be any merging and the node would not also have <code>{\"bar\": \"baz\"}</code> in its list. The one exception to this rule is the <code>AnsibleVars</code> property. If the following CRs are created:</p> <pre><code>kind: OpenStackDataPlaneRole\nmetadata:\nname: edpm-compute\nspec:\nnodeTemplate:\nansibleVars: |\nneutron_public_interface_name: eth0\nedpm_chrony_ntp_servers:\n- clock.redhat.com\n- clock2.redhat.com\n...\n</code></pre> <p><pre><code>kind: OpenStackDataPlaneNode\nmetadata:\nname: edpm-compute-0\nspec:\nrole: edpm-compute\nnode:\nansibleVars: |\ntenant_ip: 192.168.24.100\n...\n</code></pre> The <code>ConfigMap</code> containing the inventory would have the following vars:</p> <p><pre><code>      neutron_public_interface_name: eth0\ntenant_ip: 192.168.24.100\nedpm_chrony_ntp_servers:\n- clock.redhat.com\n- clock2.redhat.com\n</code></pre> Only top level keys are compared for merging. E.g. if <code>edpm-compute-0</code> had a <code>edpm_chrony_ntp_servers</code> list with <code>clock3.redhat.com</code>, then the resultant inventory for the node would not have three NTP servers; it would only have <code>clock3.redhat.com</code>. I.e. there is no \"deep merging\".</p> <p>It's also possible to create a node directly outside of a role CR and define its role. If the following CR is created: <pre><code>---\napiVersion: dataplane.openstack.org/v1beta1\nkind: OpenStackDataPlaneNode\nmetadata:\nname: openstackdataplanenode-sample-3-from\nspec:\nrole: openstackdataplanerole-sample\nhostName: openstackdataplanenode-sample-3.localdomain\nansibleHost: 192.168.122.20\nnode:\nnetworks:\n- network: ctlplane\nfixedIP: 192.168.122.20\n</code></pre> After the above CR is created, the node openstackdataplanenode-sample-3-from may then be inspected further using a command like <code>oc get OpenStackDataPlaneNode openstackdataplanenode-sample-3-from -o yaml</code> which should show that it inherited values from the role <code>nodeTemplate</code>. In cases like these, the <code>dataPlaneNodes</code> list will not reflect all of the nodes within the role.</p>"},{"location":"openstack_dataplane/","title":"OpenStackDataPlane","text":""},{"location":"openstack_dataplane/#custom-resources","title":"Custom Resources","text":"<ul> <li>OpenStackDataPlane</li> </ul>"},{"location":"openstack_dataplane/#sub-resources","title":"Sub Resources","text":"<ul> <li>OpenStackDataPlaneList</li> <li>OpenStackDataPlaneSpec</li> <li>OpenStackDataPlaneStatus</li> </ul>"},{"location":"openstack_dataplane/#openstackdataplane","title":"OpenStackDataPlane","text":"<p>OpenStackDataPlane is the Schema for the openstackdataplanes API</p> Field Description Scheme Required metadata metav1.ObjectMeta false spec OpenStackDataPlaneSpec false status OpenStackDataPlaneStatus false <p>Back to Custom Resources</p>"},{"location":"openstack_dataplane/#openstackdataplanelist","title":"OpenStackDataPlaneList","text":"<p>OpenStackDataPlaneList contains a list of OpenStackDataPlane</p> Field Description Scheme Required metadata metav1.ListMeta false items []OpenStackDataPlane true <p>Back to Custom Resources</p>"},{"location":"openstack_dataplane/#openstackdataplanespec","title":"OpenStackDataPlaneSpec","text":"<p>OpenStackDataPlaneSpec defines the desired state of OpenStackDataPlane</p> Field Description Scheme Required nodes Nodes - Map of nodes map[string]OpenStackDataPlaneNodeSpec false roles Roles - Map of roles map[string]OpenStackDataPlaneRoleSpec false deployStrategy DeployStrategy section to control how the node is deployed DeployStrategySection false <p>Back to Custom Resources</p>"},{"location":"openstack_dataplane/#openstackdataplanestatus","title":"OpenStackDataPlaneStatus","text":"<p>OpenStackDataPlaneStatus defines the observed state of OpenStackDataPlaneNode</p> Field Description Scheme Required conditions Conditions condition.Conditions false deployed Deployed bool false <p>Back to Custom Resources</p>"},{"location":"openstack_dataplanenode/","title":"OpenStackDataPlaneNode","text":""},{"location":"openstack_dataplanenode/#custom-resources","title":"Custom Resources","text":"<ul> <li>OpenStackDataPlaneNode</li> </ul>"},{"location":"openstack_dataplanenode/#sub-resources","title":"Sub Resources","text":"<ul> <li>DeployStrategySection</li> <li>NetworkConfigSection</li> <li>NetworksSection</li> <li>NodeSection</li> <li>OpenStackDataPlaneNodeList</li> <li>OpenStackDataPlaneNodeSpec</li> </ul>"},{"location":"openstack_dataplanenode/#deploystrategysection","title":"DeployStrategySection","text":"<p>DeployStrategySection for fields controlling the deployment</p> Field Description Scheme Required deploy Deploy boolean to trigger ansible execution bool true ansibleTags AnsibleTags for ansible execution string false <p>Back to Custom Resources</p>"},{"location":"openstack_dataplanenode/#networkconfigsection","title":"NetworkConfigSection","text":"<p>NetworkConfigSection is a specification of the Network configuration details</p> Field Description Scheme Required template Template - ansible j2 nic config template to use when applying node network configuration string false <p>Back to Custom Resources</p>"},{"location":"openstack_dataplanenode/#networkssection","title":"NetworksSection","text":"<p>NetworksSection is a specification of the network attributes</p> Field Description Scheme Required network Network - Network name to configure string false fixedIP FixedIP - Specific IP address to use for this network string false <p>Back to Custom Resources</p>"},{"location":"openstack_dataplanenode/#nodesection","title":"NodeSection","text":"<p>NodeSection is a specification of the node attributes</p> Field Description Scheme Required networkConfig NetworkConfig - Network configuration details. Contains os-net-config related properties. NetworkConfigSection false networks Networks - Instance networks []NetworksSection false managed Managed - Whether the node is actually provisioned (True) or should be treated as preprovisioned (False) bool false managementNetwork ManagementNetwork - Name of network to use for management (SSH/Ansible) string false ansibleUser AnsibleUser SSH user for Ansible connection string false ansiblePort AnsiblePort SSH port for Ansible connection int false ansibleVars AnsibleVars for configuring ansible string false ansibleSSHPrivateKeySecret AnsibleSSHPrivateKeySecret Private SSH Key secret containing private SSH key for connecting to node. Must be of the form: Secret.data.ssh-privatekey:  https://kubernetes.io/docs/concepts/configuration/secret/#ssh-authentication-secrets string true extraMounts ExtraMounts containing files which can be mounted into an Ansible Execution Pod []storage.VolMounts true <p>Back to Custom Resources</p>"},{"location":"openstack_dataplanenode/#openstackdataplanenode","title":"OpenStackDataPlaneNode","text":"<p>OpenStackDataPlaneNode is the Schema for the openstackdataplanenodes API</p> Field Description Scheme Required metadata metav1.ObjectMeta false spec OpenStackDataPlaneNodeSpec false status OpenStackDataPlaneStatus false <p>Back to Custom Resources</p>"},{"location":"openstack_dataplanenode/#openstackdataplanenodelist","title":"OpenStackDataPlaneNodeList","text":"<p>OpenStackDataPlaneNodeList contains a list of OpenStackDataPlaneNode</p> Field Description Scheme Required metadata metav1.ListMeta false items []OpenStackDataPlaneNode true <p>Back to Custom Resources</p>"},{"location":"openstack_dataplanenode/#openstackdataplanenodespec","title":"OpenStackDataPlaneNodeSpec","text":"<p>OpenStackDataPlaneNodeSpec defines the desired state of OpenStackDataPlaneNode</p> Field Description Scheme Required hostName HostName - node name string false node Node - node attributes specific to this node NodeSection false role Role - role name for this node string false ansibleHost AnsibleHost SSH host for Ansible connection string false deployStrategy DeployStrategy section to control how the node is deployed DeployStrategySection false networkAttachments NetworkAttachments is a list of NetworkAttachment resource names to pass to the ansibleee resource which allows to connect the ansibleee runner to the given network []string true openStackAnsibleEERunnerImage OpenStackAnsibleEERunnerImage image to use as the ansibleEE runner image string true <p>Back to Custom Resources</p>"},{"location":"openstack_dataplanerole/","title":"OpenStackDataPlaneRole","text":""},{"location":"openstack_dataplanerole/#custom-resources","title":"Custom Resources","text":"<ul> <li>OpenStackDataPlaneRole</li> </ul>"},{"location":"openstack_dataplanerole/#sub-resources","title":"Sub Resources","text":"<ul> <li>DeployStrategySection</li> <li>NetworkConfigSection</li> <li>NetworksSection</li> <li>NodeSection</li> <li>OpenStackDataPlaneRoleList</li> <li>OpenStackDataPlaneRoleSpec</li> </ul>"},{"location":"openstack_dataplanerole/#deploystrategysection","title":"DeployStrategySection","text":"<p>DeployStrategySection for fields controlling the deployment</p> Field Description Scheme Required deploy Deploy boolean to trigger ansible execution bool true ansibleTags AnsibleTags for ansible execution string false <p>Back to Custom Resources</p>"},{"location":"openstack_dataplanerole/#networkconfigsection","title":"NetworkConfigSection","text":"<p>NetworkConfigSection is a specification of the Network configuration details</p> Field Description Scheme Required template Template - ansible j2 nic config template to use when applying node network configuration string false <p>Back to Custom Resources</p>"},{"location":"openstack_dataplanerole/#networkssection","title":"NetworksSection","text":"<p>NetworksSection is a specification of the network attributes</p> Field Description Scheme Required network Network - Network name to configure string false fixedIP FixedIP - Specific IP address to use for this network string false <p>Back to Custom Resources</p>"},{"location":"openstack_dataplanerole/#nodesection","title":"NodeSection","text":"<p>NodeSection is a specification of the node attributes</p> Field Description Scheme Required networkConfig NetworkConfig - Network configuration details. Contains os-net-config related properties. NetworkConfigSection false networks Networks - Instance networks []NetworksSection false managed Managed - Whether the node is actually provisioned (True) or should be treated as preprovisioned (False) bool false managementNetwork ManagementNetwork - Name of network to use for management (SSH/Ansible) string false ansibleUser AnsibleUser SSH user for Ansible connection string false ansiblePort AnsiblePort SSH port for Ansible connection int false ansibleVars AnsibleVars for configuring ansible string false ansibleSSHPrivateKeySecret AnsibleSSHPrivateKeySecret Private SSH Key secret containing private SSH key for connecting to node. Must be of the form: Secret.data.ssh-privatekey:  https://kubernetes.io/docs/concepts/configuration/secret/#ssh-authentication-secrets string true extraMounts ExtraMounts containing files which can be mounted into an Ansible Execution Pod []storage.VolMounts true <p>Back to Custom Resources</p>"},{"location":"openstack_dataplanerole/#openstackdataplanerole","title":"OpenStackDataPlaneRole","text":"<p>OpenStackDataPlaneRole is the Schema for the openstackdataplaneroles API</p> Field Description Scheme Required metadata metav1.ObjectMeta false spec OpenStackDataPlaneRoleSpec false status OpenStackDataPlaneStatus false <p>Back to Custom Resources</p>"},{"location":"openstack_dataplanerole/#openstackdataplanerolelist","title":"OpenStackDataPlaneRoleList","text":"<p>OpenStackDataPlaneRoleList contains a list of OpenStackDataPlaneRole</p> Field Description Scheme Required metadata metav1.ListMeta false items []OpenStackDataPlaneRole true <p>Back to Custom Resources</p>"},{"location":"openstack_dataplanerole/#openstackdataplanerolespec","title":"OpenStackDataPlaneRoleSpec","text":"<p>OpenStackDataPlaneRoleSpec defines the desired state of OpenStackDataPlaneRole</p> Field Description Scheme Required dataPlane DataPlane name of OpenStackDataPlane for this role string false nodeTemplate NodeTemplate - node attributes specific to this roles NodeSection false deployStrategy DeployStrategy section to control how the node is deployed DeployStrategySection false networkAttachments NetworkAttachments is a list of NetworkAttachment resource names to pass to the ansibleee resource which allows to connect the ansibleee runner to the given network []string true openStackAnsibleEERunnerImage OpenStackAnsibleEERunnerImage image to use as the ansibleEE runner image string true <p>Back to Custom Resources</p>"}]}